service: web3tax

# operations via serverless framework, mostly working, for an automatic AWS deployment.
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  region: us-east-1
  stage: development
  profile: default
  environment:
    PORT: 3000
    TTL: 43200
    MIDGARD_LIMIT: 50
    MIDGARD_URL: "https://midgard.ninerealms.com/v2/actions?limit=50&address={WALLETS}&offset={OFFSET}"
    THORNODE_LIMIT: 50
    THORNODE_URL: "https://thornode.ninerealms.com/txs?limit=50&message.action=send&transfer.{DIRECTION}={WALLET}&page={PAGE}"
    chihuahua_LIMIT: 100
    chihuahua_URL: "https://lcd-chihuahua.cosmostation.io/cosmos/tx/v1beta1/txs?pagination.limit=100&pagination.offset={OFFSET}&events={DIRECTION}%3D%27{WALLET}%27&events=message.action%3D%27{ACTION}%27"
    chihuahua_NODES: "https://api.chihuahua.wtf/cosmos/staking/v1beta1/validators?pagination.limit=500"
    cerberus_LIMIT: 100
    cerberus_URL: "https://lcd-cerberus.cosmostation.io/cosmos/tx/v1beta1/txs?pagination.limit=100&pagination.offset={OFFSET}&events={DIRECTION}%3D%27{WALLET}%27&events=message.action%3D%27{ACTION}%27"
    cerberus_NODES: "https://lcd-cerberus.cosmostation.io/cosmos/staking/v1beta1/validators?pagination.limit=500"
    REDIS_PREFIX: "live_"
    REDIS_ENDPOINT: localhost:6379
    #REDIS_ENDPOINT:
    #  "Fn::Join": [":", ["Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Address], "Fn::GetAtt": [ServerlessElasticacheCluster, RedisEndpoint.Port]]]
functions:
  loadIndex:
    handler: handler.loadIndex
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ServerlessSecurityGroup, GroupId]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /
          method: get
  loadConvert:
    handler: handler.loadConvert
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ ServerlessSecurityGroup, GroupId ]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /convert-address.js
          method: get
  loadProof:
    handler: handler.loadProof
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ ServerlessSecurityGroup, GroupId ]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /keybase.txt
          method: get
  submitAddresses:
    handler: handler.submitAddresses
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ServerlessSecurityGroup, GroupId]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /generate
          method: get
  findRelated:
    handler: handler.findRelated
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ ServerlessSecurityGroup, GroupId ]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /guess
          method: get
  getStatus:
    handler: handler.getStatus
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ ServerlessSecurityGroup, GroupId ]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /status
          method: get
  donations:
    handler: handler.donations
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ ServerlessSecurityGroup, GroupId ]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /status
          method: get
  fetchReport:
    handler: handler.fetchReport
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ServerlessSecurityGroup, GroupId]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /report
          method: get
  purgeReport:
    handler: handler.purgeReport
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": [ServerlessSecurityGroup, GroupId]
      subnetIds:
        - Ref: ServerlessPrivateSubnetA
    events:
      - httpApi:
          path: /clear
          method: get
resources:
  Resources:
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    ElasticIpLambda:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    ServerlessPrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.1.0/24"
    ServerlessPublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.2.0/24"
    DefaultPrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: DefaultPrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
    DefaultPublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    DefaultPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: DefaultPublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
    SubnetRouteTableAssociationLambdaPrivateA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: ServerlessPrivateSubnetA
        RouteTableId:
          Ref: DefaultPrivateRouteTable
    SubnetRouteTableAssociationLambdaPublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: ServerlessPublicSubnetA
        RouteTableId:
          Ref: DefaultPublicRouteTable
    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
    ServerlessStorageSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
    ServerlessCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
        - Ref: ServerlessPrivateSubnetA
    ServerlessElasticacheCluster:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: ${self:custom.config.CACHE_INSTANCE_SIZE}
        NumCacheNodes: 1
        VpcSecurityGroupIds:
        - "Fn::GetAtt": [ServerlessStorageSecurityGroup, GroupId]
        CacheSubnetGroupName:
          Ref: ServerlessCacheSubnetGroup
custom:
  api:
    apiPath: "{proxy+}"
    apiMethod: "any"
  config:
    CACHE_INSTANCE_SIZE: cache.t3.micro
  webpackIncludeModules:  true # enable auto-packing of external modules
